# 协程：两个或多个子程序协作完成任务
# 执行过程中，在子程序内部可中断，然后转而执行别的子程序，在适当的时候再返回来接着执行
def consumer():
    r = ''
    while True:
        # 第一次执行，执行到n = yield r 退出生成器
        # 第二次开始执行，也是从这条语句进行执行,会将传过来的参数赋值给n
        n = yield r
        if not n:
            return
        print('[CONSUMER] Consuming %s...' % n)
        r = '200 OK'

def produce(c):
    # send 和next 类似，不过send()里面需要加参数
    x = c.send(None)
    n = 0
    while n < 2:
        n = n + 1
        print('[PRODUCER] Producing %s...' % n)
        r = c.send(n)
        print('[PRODUCER] Consumer return: %s' % r)
    c.close()


c = consumer()
produce(c)
