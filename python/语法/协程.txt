'''
1，子例程(子程序)：某个主程序的一部分代码，该代码执行特定的任务并且与主程序中的其他代码相对独立
2，协程看上去也是子程序，但执行过程中，在子程序内部可中断，然后转而执行别的子程序，在适当的时候再返回来接着执行。
3，协程相比于多线程的优势：
  (1) 协程极高的执行效率：子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销
  (2) 不需要多线程的锁机制
'''
def consumer():
    r = ''
    while True:
        # 第一次执行，执行到n = yield r 退出生成器
        # 第二次开始执行，也是从这条语句进行执行,会将传过来的参数赋值给n
        n = yield r
        if not n:
            return
        print('[CONSUMER] Consuming %s...' % n)
        r = '200 OK'

def produce(c):
    # send 和next 类似，不过send()里面需要加参数
    x = c.send(None)
    n = 0
    while n < 2:
        n = n + 1
        print('[PRODUCER] Producing %s...' % n)
        r = c.send(n)
        print('[PRODUCER] Consumer return: %s' % r)
    c.close()

c = consumer()
produce(c)


# asyncio
import asyncio
# @asyncio.coroutine把一个generator标记为coroutine类型
@asyncio.coroutine
def hello():
    print("Hello world!")
    # 异步调用asyncio.sleep(1):
    # yield from语法可以让我们方便地调用另一个generator
    # 由于asyncio.sleep()也是一个coroutine，所以线程不会等待asyncio.sleep()，而是直接中断并执行下一个消息循环
    r = yield from asyncio.sleep(10)
    print("Hello again!")

@asyncio.coroutine
def fish():
    print("hello fish")
    yield from asyncio.sleep(5)
    print("fish again!")
        
# 获取EventLoop:
loop = asyncio.get_event_loop()
tasks = [hello(), fish(),hello()]
# 执行coroutine
loop.run_until_complete(asyncio.wait(tasks))
print('end')
loop.close()


# async和await
# 把@asyncio.coroutine替换为async
# 把yield from替换为await
async def hello():
    print("Hello world!")
    r = await asyncio.sleep(1)
    print("Hello again!")