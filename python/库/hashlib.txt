# hashlib(哈希算法)
# 摘要算法又称哈希算法、散列算法。它通过一个函数，把任意长度的数据转换为一个长度固定的数据串
# 摘要算法就是通过摘要函数f()对任意长度的数据data计算出固定长度的摘要digest，目的是为了发现原始数据是否被人篡改过
# MD5算法，生成结果是固定的128 bit字节
# 如果数据量很大，可以分块多次调用update()，最后计算的结果是一样的
import hashlib
md5 = hashlib.md5()
md5.update('how to use md5 in '.encode('utf-8'))
md5.update('python hashlib?'.encode('utf-8'))
md5 = md5.hexdigest()
print(md5)  # d26a53750bc40b38b65a520292f69306

# SHA1算法的结果是160 bit字节
sha1 = hashlib.sha1()
sha1.update('how to use sha1 in '.encode('utf-8'))
sha1.update('python hashlib?'.encode('utf-8'))
sha1 = sha1.hexdigest()
print(sha1)  # 2c76b57293ce30acef38d98f6046927161b46a44




# Hmac(用key强化哈希算法)
# Hmac算法，它通过一个标准算法，在计算哈希的过程中，把key混入计算过程中
# 传入的key和message都是bytes类型，str类型需要首先编码为bytes
# 如果消息很长，可以多次调用h.update(msg)
import hmac
message = b'Hello, world!'
key = b'secret'
h = hmac.new(key, message, digestmod='MD5')
print(h.hexdigest())  # fa4ee7d173f2d97ee79022d1a7355bcf
